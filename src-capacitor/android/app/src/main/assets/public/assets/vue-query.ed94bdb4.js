import { i as getClientKey, Q as QueryClient, g as boot, __tla as __tla_0 } from "./index.99fce08b.js";
let vueQuery;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })()
]).then(async () => {
  const VueQueryPlugin = {
    install: (app, options = {}) => {
      const clientKey = getClientKey(options.queryClientKey);
      let client;
      if ("queryClient" in options && options.queryClient) {
        client = options.queryClient;
      } else {
        if (options.contextSharing && typeof window !== "undefined") {
          if (!window.__VUE_QUERY_CONTEXT__) {
            const clientConfig = "queryClientConfig" in options ? options.queryClientConfig : void 0;
            client = new QueryClient(clientConfig);
            window.__VUE_QUERY_CONTEXT__ = client;
          } else {
            client = window.__VUE_QUERY_CONTEXT__;
          }
        } else {
          const clientConfig = "queryClientConfig" in options ? options.queryClientConfig : void 0;
          client = new QueryClient(clientConfig);
        }
      }
      client.mount();
      let persisterUnmount = () => {
      };
      if (options.clientPersister) {
        client.isRestoring.value = true;
        const [unmount, promise] = options.clientPersister(client);
        persisterUnmount = unmount;
        promise.then(() => {
          client.isRestoring.value = false;
        });
      }
      const cleanup = () => {
        client.unmount();
        persisterUnmount();
      };
      if (app.onUnmount) {
        app.onUnmount(cleanup);
      } else {
        const originalUnmount = app.unmount;
        app.unmount = function vueQueryUnmount() {
          cleanup();
          originalUnmount();
        };
      }
      {
        app.provide(clientKey, client);
      }
    }
  };
  vueQuery = boot(async ({ app }) => {
    app.use(VueQueryPlugin);
  });
});
export {
  __tla,
  vueQuery as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnVlLXF1ZXJ5LmVkOTRiZGI0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3Z1ZS1xdWVyeS9idWlsZC9saWIvdnVlUXVlcnlQbHVnaW4uZXNtLmpzIiwiLi4vLi4vLi4vc3JjL2Jvb3QvdnVlLXF1ZXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVnVlMiB9IGZyb20gJ3Z1ZS1kZW1pJztcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50IH0gZnJvbSAnLi9xdWVyeUNsaWVudC5lc20uanMnO1xuaW1wb3J0IHsgZ2V0Q2xpZW50S2V5IH0gZnJvbSAnLi91dGlscy5lc20uanMnO1xuaW1wb3J0IHsgc2V0dXBEZXZ0b29scyB9IGZyb20gJy4vZGV2dG9vbHMvZGV2dG9vbHMuZXNtLmpzJztcblxuY29uc3QgVnVlUXVlcnlQbHVnaW4gPSB7XG4gIGluc3RhbGw6IChhcHAsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGNsaWVudEtleSA9IGdldENsaWVudEtleShvcHRpb25zLnF1ZXJ5Q2xpZW50S2V5KTtcbiAgICBsZXQgY2xpZW50O1xuXG4gICAgaWYgKCdxdWVyeUNsaWVudCcgaW4gb3B0aW9ucyAmJiBvcHRpb25zLnF1ZXJ5Q2xpZW50KSB7XG4gICAgICBjbGllbnQgPSBvcHRpb25zLnF1ZXJ5Q2xpZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5jb250ZXh0U2hhcmluZyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIXdpbmRvdy5fX1ZVRV9RVUVSWV9DT05URVhUX18pIHtcbiAgICAgICAgICBjb25zdCBjbGllbnRDb25maWcgPSAncXVlcnlDbGllbnRDb25maWcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnF1ZXJ5Q2xpZW50Q29uZmlnIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGNsaWVudCA9IG5ldyBRdWVyeUNsaWVudChjbGllbnRDb25maWcpO1xuICAgICAgICAgIHdpbmRvdy5fX1ZVRV9RVUVSWV9DT05URVhUX18gPSBjbGllbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xpZW50ID0gd2luZG93Ll9fVlVFX1FVRVJZX0NPTlRFWFRfXztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY2xpZW50Q29uZmlnID0gJ3F1ZXJ5Q2xpZW50Q29uZmlnJyBpbiBvcHRpb25zID8gb3B0aW9ucy5xdWVyeUNsaWVudENvbmZpZyA6IHVuZGVmaW5lZDtcbiAgICAgICAgY2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KGNsaWVudENvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xpZW50Lm1vdW50KCk7XG5cbiAgICBsZXQgcGVyc2lzdGVyVW5tb3VudCA9ICgpID0+IHsvLyBub29wXG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zLmNsaWVudFBlcnNpc3Rlcikge1xuICAgICAgY2xpZW50LmlzUmVzdG9yaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICAgIGNvbnN0IFt1bm1vdW50LCBwcm9taXNlXSA9IG9wdGlvbnMuY2xpZW50UGVyc2lzdGVyKGNsaWVudCk7XG4gICAgICBwZXJzaXN0ZXJVbm1vdW50ID0gdW5tb3VudDtcbiAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIGNsaWVudC5pc1Jlc3RvcmluZy52YWx1ZSA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5jb250ZXh0U2hhcmluZykge1xuICAgICAgY2xpZW50LmdldExvZ2dlcigpLmVycm9yKFwiVGhlIGNvbnRleHRTaGFyaW5nIG9wdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvblwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgY2xpZW50LnVubW91bnQoKTtcbiAgICAgIHBlcnNpc3RlclVubW91bnQoKTtcbiAgICB9O1xuXG4gICAgaWYgKGFwcC5vblVubW91bnQpIHtcbiAgICAgIGFwcC5vblVubW91bnQoY2xlYW51cCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsVW5tb3VudCA9IGFwcC51bm1vdW50O1xuXG4gICAgICBhcHAudW5tb3VudCA9IGZ1bmN0aW9uIHZ1ZVF1ZXJ5VW5tb3VudCgpIHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICBvcmlnaW5hbFVubW91bnQoKTtcbiAgICAgIH07XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICAgIGlmIChpc1Z1ZTIpIHtcbiAgICAgIGFwcC5taXhpbih7XG4gICAgICAgIGJlZm9yZUNyZWF0ZSgpIHtcbiAgICAgICAgICAvLyBIQUNLOiB0YWtlbiBmcm9tIHByb3ZpZGUoKTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2NvbXBvc2l0aW9uLWFwaS9ibG9iL21hc3Rlci9zcmMvYXBpcy9pbmplY3QudHMjTDMwXG4gICAgICAgICAgaWYgKCF0aGlzLl9wcm92aWRlZCkge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZUNhY2hlID0ge307XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19wcm92aWRlZCcsIHtcbiAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwcm92aWRlQ2FjaGUsXG4gICAgICAgICAgICAgIHNldDogdiA9PiBPYmplY3QuYXNzaWduKHByb3ZpZGVDYWNoZSwgdilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX3Byb3ZpZGVkW2NsaWVudEtleV0gPSBjbGllbnQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzID09PSB0aGlzLiRyb290KSB7XG4gICAgICAgICAgICAgIHNldHVwRGV2dG9vbHModGhpcywgY2xpZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcC5wcm92aWRlKGNsaWVudEtleSwgY2xpZW50KTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIHNldHVwRGV2dG9vbHMoYXBwLCBjbGllbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgVnVlUXVlcnlQbHVnaW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZ1ZVF1ZXJ5UGx1Z2luLmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IGJvb3QgfSBmcm9tICdxdWFzYXIvd3JhcHBlcnMnO1xuaW1wb3J0IHsgVnVlUXVlcnlQbHVnaW4gfSBmcm9tICdAdGFuc3RhY2svdnVlLXF1ZXJ5JztcblxuLy8gXCJhc3luY1wiIGlzIG9wdGlvbmFsO1xuLy8gbW9yZSBpbmZvIG9uIHBhcmFtczogaHR0cHM6Ly92Mi5xdWFzYXIuZGV2L3F1YXNhci1jbGkvYm9vdC1maWxlc1xuZXhwb3J0IGRlZmF1bHQgYm9vdChhc3luYyAoeyBhcHAgfSkgPT4ge1xuICBhcHAudXNlKFZ1ZVF1ZXJ5UGx1Z2luKTtcbn0pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsTUFBTSxjQUFjLEdBQUc7QUFDdkIsRUFBRSxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxHQUFHLEVBQUUsS0FBSztBQUNsQyxJQUFJLE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDM0QsSUFBSSxJQUFJLE1BQU0sQ0FBQztBQUNmO0FBQ0EsSUFBSSxJQUFJLGFBQWEsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtBQUN6RCxN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
